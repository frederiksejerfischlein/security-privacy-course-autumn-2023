library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
anonymizedData <- read.csv(here(anonymized_data.csv))
anonymizedData <- read.csv(here('anonymized_data.csv'))
anonymizedData
publicData <- read_excel(here('public_data.xlsx'))
auxiliaryData <- read.csv(here('auxiliary_data.csv'))
auxiliaryData <- read.csv(here('auxiliary_data.csv'))
auxiliaryData
auxiliaryData <- read.csv(here('auxiliary_data.csv'))
auxiliaryData
auxiliaryData$name <- paste(auxiliaryData$First.Name, auxiliaryData$Last.name, sep = ' ')
auxiliaryData
auxiliaryData$First.Name
auxiliaryData$First.Name...
auxiliaryData$First.Name  = substr(auxiliaryData$First.Name,1,nchar(auxiliaryData$First.Name)-3)
auxiliaryData$name <- paste(auxiliaryData$First.Name, auxiliaryData$Last.name, sep = ' ')
auxiliaryData
auxiliaryData <- auxiliaryData[c('name')]
auxiliaryData
publicData <- subset(publicData, sum(str_detect($column_name, '^exact_string$')) > 0)
publicData
publicData <- subset(publicData, sum(str_detect(auxiliaryData$name, name)) > 0)
library(stringr)
publicData <- subset(publicData, sum(str_detect(auxiliaryData$name, name)) > 0)
publicData
auxiliaryData$name <- paste(auxiliaryData$Last.Name, auxiliaryData$First.name, sep = ', ') # Joining the first and last name in a single column
auxiliaryData <- read.csv(here('auxiliary_data.csv')) #reading the file
auxiliaryData$First.Name  = substr(auxiliaryData$First.Name,1,nchar(auxiliaryData$First.Name)-3) #Removing the 3 semicolons from the end
auxiliaryData$name <- paste(auxiliaryData$Last.Name, auxiliaryData$First.name, sep = ', ') # Joining the first and last name in a single column
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
auxiliaryData
auxiliaryData$name <- paste(auxiliaryData$Last.Name, auxiliaryData$First.name, sep = ', ') # Joining the first and last name in a single column
auxiliaryData <- read.csv(here('auxiliary_data.csv')) #reading the file
auxiliaryData$First.Name  = substr(auxiliaryData$First.Name,1,nchar(auxiliaryData$First.Name)-3) #Removing the 3 semicolons from the end
auxiliaryData$name <- paste(auxiliaryData$Last.Name, auxiliaryData$First.name, sep = ', ') # Joining the first and last name in a single column
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(sdcMicro) #privacy package being used for the anonymization
library(writexl) #allows to write into an excel file
library(stringr)
anonymizedData <- read.csv(here('anonymized_data.csv')) #reading the file
publicData <- read_excel(here('public_data.xlsx')) #reading the file
auxiliaryData <- read.csv(here('auxiliary_data.csv')) #reading the file
auxiliaryData$First.Name  = substr(auxiliaryData$First.Name,1,nchar(auxiliaryData$First.Name)-3) #Removing the 3 semicolons from the end
auxiliaryData$name <- paste(auxiliaryData$Last.Name, auxiliaryData$First.name, sep = ', ') # Joining the first and last name in a single column
auxiliaryData
auxiliaryData <- read.csv(here('auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
auxiliaryData
auxiliaryData
publicData <- subset(publicData, sum(str_detect(auxiliaryData$name, name)) > 0)
publicData <- subset(publicData, sum(str_detect(auxiliaryData$name, publicData$name)) > 0)
publicData <- subset(publicData, name in auxiliaryData$name)
publicData <- subset(publicData, name %in% auxiliaryData$name)
publicData
publicData[,'marital_status'][publicData[,'marital_status'] == 'Never married' %or% publicData[,'marital_status'] == 'Divorced' %or% publicData[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData[,'marital_status'][publicData[,'marital_status'] == 'Never married'] <- 'Not married'
publicData[,'marital_status'][publicData[,'marital_status'] == 'Never married'] <- 'Not married'
publicData[,'marital_status'][publicData[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData[,'marital_status'][publicData[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData[,'marital_status'][publicData[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(sdcMicro) #privacy package being used for the anonymization
library(writexl) #allows to write into an excel file
anonymizedData <- read.csv(here('anonymized_data.csv')) #reading the file
auxiliaryData <- read.csv(here('auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$name <- NULL
publicData1
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$name <- NULL
publicData1$citizenship <- NULL
publicData1$zip <- NULL
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymized data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymized data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1
publicData1$age <- 2023 - format(as.Date(df$date, format="%d/%m/%Y"),"%Y")
publicData1$age <- 2023 - format(as.Date(publicData1$dob, format="%d/%m/%Y"),"%Y")
library(lubridate)
publicData1$age <- 2023 - year(publicData1$dob)
publicData1
publicData1$dob <- NULL
publicData1
library(dplyr)
anonymizedData
publicData1[,'age'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age_range'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age_range'] <- NA
publicData1[,'age_range'][publicData1[,'age'] < 41] <- '18-40'
publicData1
print(publicData1, n = 200)
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob)
publicData1$dob <- NULL
print(publicData1, n = 200)
publicData1[,'age_range'] <- NA
print(publicData1, n = 200)
publicData1[,'age_range'][publicData1[,'age'] < 41] <- '18-40'
print(publicData1, n = 200)
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
print(publicData1, n = 200)
publicData1[,'age_range'][publicData1[,'age'] < 71] <- '41-70'
print(publicData1, n = 200)
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob)
publicData1$dob <- NULL
publicData1[,'age_group'] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 71] <- '41-70'
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NA
print(publicData1, n = 200)
publicData1$age <- NULL
print(publicData1, n = 200)
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NULL
print(publicData1, n = 200)
anonymizedData %>% group_by(sex, evote, marital_status, age_group)
anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party))
print(anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party)), n = 22)
groupedAnon <- anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party))
print(groupedAnon, n = 22)
groupedAnonCompromised <- subset(groupedAnon, parties < 2)
groupedAnonCompromised
groupedAnonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
groupedAnonCompromised
groupedAnonCompromised$ education <- NULL
groupedAnonCompromised$countIndividuals <- NULL
groupedAnonCompromised$parties <- NULL
groupedAnonCompromised
print(groupedAnonCompromised, n = 40)
publicData1
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(sdcMicro) #privacy package being used for the anonymization
library(writexl) #allows to write into an excel file
library(lubridate)
library(dplyr)
anonymizedData <- read.csv(here('anonymized_data.csv')) #reading the file
auxiliaryData <- read.csv(here('auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote' #change the name column so it matches the other data set
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married' #categorising the data
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob) # calculating age and categorising it
publicData1$dob <- NULL
publicData1[,'age_group'] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 71] <- '41-70'
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NULL
anonymizedData$education <- NULL # dropping useless column for identification
groupedAnon <- anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party)) # grouping the data based on the quasi-identifiers
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
AnonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
AnonCompromised$education <- NULL
AnonCompromised$countIndividuals <- NULL
AnonCompromised$parties <- NULL
print(groupedAnonCompromised, n = 40)
print(AnonCompromised, n = 40)
AnonCompromised <- inner_join(AnonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group'))
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- anonymizedData %>% group_by(sex, evote, marital_status, age_group, party)
anonCompromised <- inner_join(AnonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group'))
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- anonymizedData %>% group_by(sex, evote, marital_status, age_group, party)
anonCompromised
anonCompromised
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- anonymizedData %>% group_by(sex, evote, marital_status, age_group, party)
anonCompromised
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(sdcMicro) #privacy package being used for the anonymization
library(writexl) #allows to write into an excel file
library(lubridate)
library(dplyr)
anonymizedData <- read.csv(here('anonymized_data.csv')) #reading the file
auxiliaryData <- read.csv(here('auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote' #change the name column so it matches the other data set
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married' #categorising the data
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob) # calculating age and categorising it
publicData1$dob <- NULL
publicData1[,'age_group'] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 71] <- '41-70'
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NULL
anonymizedData$education <- NULL # dropping useless column for identification
groupedAnon <- anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party)) # grouping the data based on the quasi-identifiers
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- anonymizedData %>% group_by(sex, evote, marital_status, age_group, party)
anonCompromised
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- groupedAnon %>% group_by(sex, evote, marital_status, age_group, party)
anonCompromised
anonCompromised <- groupedAnon %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise()
anonCompromised
anonCompromised <- groupedAnon %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise(count = n())
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- groupedAnon %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise(count = n())
clear()
clear
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(sdcMicro) #privacy package being used for the anonymization
library(writexl) #allows to write into an excel file
library(lubridate)
library(dplyr)
anonymizedData <- read.csv(here('anonymized_data.csv')) #reading the file
auxiliaryData <- read.csv(here('auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
publicData <- read_excel(here('public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote' #change the name column so it matches the other data set
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married' #categorising the data
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob) # calculating age and categorising it
publicData1$dob <- NULL
publicData1[,'age_group'] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 71] <- '41-70'
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NULL
anonymizedData$education <- NULL # dropping useless column for identification
groupedAnon <- anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party)) # grouping the data based on the quasi-identifiers
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- groupedAnon %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise(count = n())
anonCompromised
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- anonCompromised %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise(count = n())
anonCompromised
anonCompromised
anonCompromised <- inner_join(AnonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised
anonCompromised
anonCompromised1 <- inner_join(AnonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised <- inner_join(anonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group'))
anonCompromised
anonCompromised$count <- NULL
write_xlsx(data1, here('data', 'recordsCompromised.xlsx')) #saving the data
write_xlsx(anonCompromised, here('data', 'recordsCompromised.xlsx')) #saving the data
write_xlsx(anonCompromised, here('data', 'recordsCompromised.xlsx')) #saving the data
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(writexl) #allows to write into an excel file
library(lubridate) # simplifies the manipulation of dob into age
library(dplyr) # simplifies the grouping and joining operations
anonymizedData <- read.csv(here('data','anonymized_data.csv')) #reading the file
auxiliaryData <- read.csv(here('data', 'auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
publicData <- read_excel(here('data', 'public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote' #change the name column so it matches the other data set
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married' #categorising the data
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob) # calculating age and categorising it
publicData1$dob <- NULL
publicData1[,'age_group'] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 71] <- '41-70'
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NULL
anonymizedData$education <- NULL # dropping useless column for identification
groupedAnon <- anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party)) # grouping the data based on the quasi-identifiers
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifiers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group')) #joining with the anonymized data so the party is in the data-frame
anonCompromised <- anonCompromised %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise(count = n()) # grouping again
anonCompromised <- inner_join(anonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group')) # joining with the public data so that the name matches
anonCompromised$count <- NULL #removing superfluous column
write_xlsx(anonCompromised, here('data', 'recordsCompromised.xlsx')) #saving the data
recordsCompromised <- anonCompromised[c('name', 'party')]
library(readxl) #allows us to read the excel file
library(here) #simplifies the use of relative paths
library(writexl) #allows to write into an excel file
library(lubridate) # simplifies the manipulation of dob into age
library(dplyr) # simplifies the grouping and joining operations
anonymizedData <- read.csv(here('data','anonymized_data.csv')) #reading the file
auxiliaryData <- read.csv(here('data', 'auxiliary_data.csv'), sep = ';') #reading the file
auxiliaryData <- auxiliaryData[c('name')] # dropping the superfluous columns
publicData <- read_excel(here('data', 'public_data.xlsx')) #reading the file
publicData1 <- subset(publicData, name %in% auxiliaryData$name) # dropping the superfluous rows
publicData1$citizenship <- NULL #this was dropped in the anonymised data_set hence it is no longer useful
publicData1$zip <- NULL # this was dropped in the anonymised data_set hence it is no longer useful
names(publicData1)[names(publicData1) == 'last_voted'] <- 'evote' #change the name column so it matches the other data set
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Never married'] <- 'Not married' #categorising the data
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Divorced'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Widowed'] <- 'Not married'
publicData1[,'marital_status'][publicData1[,'marital_status'] == 'Married/separated'] <- 'Married'
publicData1$age <- 2023 - year(publicData1$dob) # calculating age and categorising it
publicData1$dob <- NULL
publicData1[,'age_group'] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 41] <- '18-40'
publicData1[,'age'][publicData1[,'age'] < 41] <- NA
publicData1[,'age_group'][publicData1[,'age'] < 71] <- '41-70'
publicData1[,'age_group'][publicData1[,'age'] > 70] <- '70+'
publicData1$age <- NULL
anonymizedData$education <- NULL # dropping useless column for identification
groupedAnon <- anonymizedData %>% group_by(sex, evote, marital_status, age_group) %>% summarise(countIndividuals = n(), parties = n_distinct(party)) # grouping the data based on the quasi-identifiers
groupedAnonCompromised <- subset(groupedAnon, parties < 2) #getting the groups that had distinct quasi-identifiers and voted for only one party
anonCompromised <- inner_join(groupedAnonCompromised, anonymizedData, by = c('sex', 'evote', 'marital_status', 'age_group')) #joining with the anonymized data so the party is in the data-frame
anonCompromised <- anonCompromised %>% group_by(sex, evote, marital_status, age_group, party) %>% summarise(count = n()) # grouping again
anonCompromised <- inner_join(anonCompromised, publicData1, by = c('sex', 'evote', 'marital_status', 'age_group')) # joining with the public data so that the name matches
anonCompromised$count <- NULL #removing superfluous column
recordsCompromised <- anonCompromised[c('name', 'party')]
write_xlsx(anonCompromised, here('data', 'recordsCompromised.xlsx')) #saving the data
write.csv(recordsCompromised, sep = ';')
write_csv(recordsCompromised, here('data', 'recordsCompromised.csv'), sep = ';')
write.csv(recordsCompromised, here('data', 'recordsCompromised.csv'), sep = ';')
recordsCompromised
write.csv(recordsCompromised, here('data', 'recordsCompromised.csv'), row.names = FALSE)
